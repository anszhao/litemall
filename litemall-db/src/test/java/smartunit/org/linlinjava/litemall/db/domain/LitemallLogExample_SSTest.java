/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.org.linlinjava.litemall.db.domain;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import java.util.LinkedList;
import java.util.List;
import org.junit.runner.RunWith;
import org.linlinjava.litemall.db.domain.LitemallLogExample;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class LitemallLogExample_SSTest extends LitemallLogExample_SSTest_scaffolding {
// allCoveredLines:[38, 39, 40, 49, 50, 59, 69, 70, 79, 89, 99, 100, 109, 110, 111, 121, 122, 132, 133, 134, 135, 136, 139, 140, 150, 151, 152, 154, 164, 165, 175, 176, 177, 178, 187, 188, 198, 199, 201, 211, 212, 214, 216, 229, 230, 231, 253, 256, 257, 1587, 1588, 1603, 1604, 1725, 1726, 1727, 1736, 1760, 1761, 1763, 1773, 1774, 1776, 1778, 1788, 1866, 1867, 1868, 1869, 1870, 1873, 1875, 1878, 1879]

  @Test(timeout = 4000)
  public void test_andLogicalDeleted_00()  throws Throwable  {
      //caseID:d3d97e88322c13621894113b5d731924
      //CoveredLines: [38, 39, 40, 150, 151, 152, 154, 164, 165, 229, 230, 231, 253, 256, 257, 1603, 1604, 1725, 1726, 1727, 1760, 1763, 1788, 1866, 1867, 1868, 1869, 1870, 1873, 1875, 1878, 1879]
      //Input_0_boolean: false
      //Assert: assertSame(method_result, litemallLogExample_Criteria1);
      
      LitemallLogExample litemallLogExample0 = new LitemallLogExample();
      LitemallLogExample.Criteria litemallLogExample_Criteria0 = litemallLogExample0.createCriteria();
      //mock litemallLogExample_ICriteriaWhen0
      LitemallLogExample.ICriteriaWhen litemallLogExample_ICriteriaWhen0 = mock(LitemallLogExample.ICriteriaWhen.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      LitemallLogExample.Criteria litemallLogExample_Criteria1 = litemallLogExample_Criteria0.when(false, litemallLogExample_ICriteriaWhen0);
      
      //Call method: andLogicalDeleted
      LitemallLogExample.Criteria litemallLogExample_Criteria2 = litemallLogExample_Criteria1.andLogicalDeleted(false);
      
      //Test Result Assert
      assertSame(litemallLogExample_Criteria2, litemallLogExample_Criteria1);
  }

  @Test(timeout = 4000)
  public void test_andLogicalDeleted_01()  throws Throwable  {
      //caseID:657e96cd08c14f101eddaecccd2847f9
      //CoveredLines: [38, 39, 40, 150, 151, 152, 154, 164, 165, 187, 188, 229, 230, 231, 253, 256, 257, 1587, 1588, 1725, 1726, 1727, 1773, 1776, 1778, 1788, 1866, 1867, 1868, 1869, 1870, 1873, 1875, 1878, 1879]
      //Input_0_boolean: true
      //Assert: assertSame(method_result, litemallLogExample_Criteria0);
      
      LitemallLogExample litemallLogExample0 = new LitemallLogExample();
      LitemallLogExample.Criteria litemallLogExample_Criteria0 = LitemallLogExample.newAndCreateCriteria();
      //mock litemallLogExample_ICriteriaWhen0
      LitemallLogExample.ICriteriaWhen litemallLogExample_ICriteriaWhen0 = mock(LitemallLogExample.ICriteriaWhen.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      LitemallLogExample.Criteria litemallLogExample_Criteria1 = litemallLogExample_Criteria0.when(false, litemallLogExample_ICriteriaWhen0, litemallLogExample_ICriteriaWhen0);
      
      //Call method: andLogicalDeleted
      LitemallLogExample.Criteria litemallLogExample_Criteria2 = litemallLogExample_Criteria1.andLogicalDeleted(true);
      
      //Test Result Assert
      assertSame(litemallLogExample_Criteria2, litemallLogExample_Criteria0);
  }

  @Test(timeout = 4000)
  public void test_andLogicalDeleted_02()  throws Throwable  {
      //caseID:64f854f268e40d71c57d737288e5ca48
      //CoveredLines: [38, 39, 40, 150, 151, 152, 154, 164, 165, 187, 188, 229, 230, 231, 253, 256, 257, 1587, 1588, 1725, 1726, 1727, 1773, 1774, 1778, 1788, 1866, 1867, 1868, 1869, 1870, 1873, 1875, 1878, 1879]
      //Input_0_boolean: true
      //Assert: assertSame(litemallLogExample_Criteria0, method_result);
      
      LitemallLogExample litemallLogExample0 = new LitemallLogExample();
      LitemallLogExample.Criteria litemallLogExample_Criteria0 = LitemallLogExample.newAndCreateCriteria();
      //mock litemallLogExample_ICriteriaWhen0
      LitemallLogExample.ICriteriaWhen litemallLogExample_ICriteriaWhen0 = mock(LitemallLogExample.ICriteriaWhen.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      LitemallLogExample.Criteria litemallLogExample_Criteria1 = litemallLogExample_Criteria0.when(true, litemallLogExample_ICriteriaWhen0, litemallLogExample_ICriteriaWhen0);
      
      //Call method: andLogicalDeleted
      LitemallLogExample.Criteria litemallLogExample_Criteria2 = litemallLogExample_Criteria1.andLogicalDeleted(true);
      
      //Test Result Assert
      assertSame(litemallLogExample_Criteria0, litemallLogExample_Criteria2);
  }

  @Test(timeout = 4000)
  public void test_clear_03()  throws Throwable  {
      //caseID:c1d8e5fdfbd51633014d55865d918ab7
      //CoveredLines: [38, 39, 40, 175, 176, 177, 178]
      
      LitemallLogExample litemallLogExample0 = new LitemallLogExample();
      
      //Call method: clear
      litemallLogExample0.clear();
      
      //Test Result Assert
      assertFalse(litemallLogExample0.isDistinct());
  }

  @Test(timeout = 4000)
  public void test_createCriteria_04()  throws Throwable  {
      //caseID:604af9dcc802946a9ce3ede8bf5ac31a
      //CoveredLines: [38, 39, 40, 150, 151, 154, 164, 165, 229, 230, 231, 1725, 1726, 1727]
      //Assert: assertFalse(method_result.equals((Object)litemallLogExample_Criteria0));
      
      LitemallLogExample litemallLogExample0 = new LitemallLogExample();
      LinkedList<LitemallLogExample.Criteria> linkedList0 = new LinkedList<LitemallLogExample.Criteria>();
      //mock litemallLogExample_Criteria0
      LitemallLogExample.Criteria litemallLogExample_Criteria0 = mock(LitemallLogExample.Criteria.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      linkedList0.add(litemallLogExample_Criteria0);
      PrivateAccess.setVariable((Class<?>) LitemallLogExample.class, litemallLogExample0, "oredCriteria", (Object) linkedList0);
      
      //Call method: createCriteria
      LitemallLogExample.Criteria litemallLogExample_Criteria1 = litemallLogExample0.createCriteria();
      
      //Test Result Assert
      assertFalse(litemallLogExample_Criteria1.equals((Object)litemallLogExample_Criteria0));
  }

  @Test(timeout = 4000)
  public void test_example_05()  throws Throwable  {
      //caseID:a8044619d4b8d219bd5ea4ac3af6276b
      //CoveredLines: [38, 39, 40, 109, 110, 111, 164, 165, 229, 230, 231, 1725, 1726, 1727, 1736]
      //Assert: assertSame(method_result, litemallLogExample0);
      
      LitemallLogExample litemallLogExample0 = new LitemallLogExample();
      LitemallLogExample.Criteria litemallLogExample_Criteria0 = litemallLogExample0.or();
      
      //Call method: example
      LitemallLogExample litemallLogExample1 = litemallLogExample_Criteria0.example();
      
      //Test Result Assert
      assertSame(litemallLogExample1, litemallLogExample0);
  }

  @Test(timeout = 4000)
  public void test_getOrderByClause_06()  throws Throwable  {
      //caseID:4b2cf4dd0192c7265aead75d2d0b59f9
      //CoveredLines: [38, 39, 40, 59]
      //Assert: assertNull(method_result);
      
      LitemallLogExample litemallLogExample0 = new LitemallLogExample();
      
      //Call method: getOrderByClause
      String string0 = litemallLogExample0.getOrderByClause();
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_getOredCriteria_07()  throws Throwable  {
      //caseID:8991480fa89acd7226e7539e1627ca07
      //CoveredLines: [38, 39, 40, 89]
      //Assert: assertTrue(method_result.isEmpty());
      
      LitemallLogExample litemallLogExample0 = new LitemallLogExample();
      
      //Call method: getOredCriteria
      List<LitemallLogExample.Criteria> list0 = litemallLogExample0.getOredCriteria();
      
      //Test Result Assert
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test_isDistinct_08()  throws Throwable  {
      //caseID:351ce4ea6123840bfd80c1437331ffb9
      //CoveredLines: [38, 39, 40, 79]
      //Assert: assertFalse(method_result);
      
      LitemallLogExample litemallLogExample0 = new LitemallLogExample();
      
      //Call method: isDistinct
      boolean boolean0 = litemallLogExample0.isDistinct();
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_or_09()  throws Throwable  {
      //caseID:9be704a90a76a64987ae72b0b5fe71d8
      //CoveredLines: [38, 39, 40, 99, 100]
      //Input_0_LitemallLogExample$Criteria: {}
      
      LitemallLogExample litemallLogExample0 = new LitemallLogExample();
      //mock litemallLogExample_Criteria0
      LitemallLogExample.Criteria litemallLogExample_Criteria0 = mock(LitemallLogExample.Criteria.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: or
      litemallLogExample0.or(litemallLogExample_Criteria0);
      
      //Test Result Assert
      assertNull(litemallLogExample0.getOrderByClause());
  }

  @Test(timeout = 4000)
  public void test_orderBy_10()  throws Throwable  {
      //caseID:c309a9336492a61298fcc2f4eee7cfc5
      //CoveredLines: [38, 39, 40, 49, 50, 121, 122]
      //Input_0_String: "r_9ca-"
      //Assert: assertEquals("r_9ca-", litemallLogExample0.getOrderByClause());
      //Assert: assertEquals("r_9ca-", method_result.getOrderByClause());
      
      LitemallLogExample litemallLogExample0 = new LitemallLogExample();
      
      //Call method: orderBy
      LitemallLogExample litemallLogExample1 = litemallLogExample0.orderBy("r_9ca-");
      
      //Test Result Assert
      assertEquals("r_9ca-", litemallLogExample0.getOrderByClause());
      
      //Test Result Assert
      assertEquals("r_9ca-", litemallLogExample1.getOrderByClause());
  }

  @Test(timeout = 4000)
  public void test_orderBy_11()  throws Throwable  {
      //caseID:8de60baf1d0d8c9009d00ec444b62659
      //CoveredLines: [38, 39, 40, 49, 50, 132, 133, 134, 135, 136, 139, 140]
      //Input_0_String[]: stringArray0
      //Assert: assertEquals("null , null , null , null , null , null , null", method_result.getOrderByClause());
      
      LitemallLogExample litemallLogExample0 = new LitemallLogExample();
      String[] stringArray0 = new String[7];
      
      //Call method: orderBy
      LitemallLogExample litemallLogExample1 = litemallLogExample0.orderBy(stringArray0);
      
      //Test Result Assert
      assertEquals("null , null , null , null , null , null , null", litemallLogExample1.getOrderByClause());
  }

  @Test(timeout = 4000)
  public void test_setDistinct_12()  throws Throwable  {
      //caseID:8f7905eab77e5f4cc860b17105f03c06
      //CoveredLines: [38, 39, 40, 69, 70]
      //Input_0_boolean: true
      
      LitemallLogExample litemallLogExample0 = new LitemallLogExample();
      
      //Call method: setDistinct
      litemallLogExample0.setDistinct(true);
      
      //Test Result Assert
      assertTrue(litemallLogExample0.isDistinct());
  }

  @Test(timeout = 4000)
  public void test_when_13()  throws Throwable  {
      //caseID:7f586d4b5086f4b2d5ffbed712a89b6f
      //CoveredLines: [38, 39, 40, 198, 201]
      //Input_0_boolean: false
      //Input_1_LitemallLogExample$IExampleWhen: {}
      //Assert: assertFalse(method_result.isDistinct());
      
      LitemallLogExample litemallLogExample0 = new LitemallLogExample();
      //mock litemallLogExample_IExampleWhen0
      LitemallLogExample.IExampleWhen litemallLogExample_IExampleWhen0 = mock(LitemallLogExample.IExampleWhen.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: when
      LitemallLogExample litemallLogExample1 = litemallLogExample0.when(false, litemallLogExample_IExampleWhen0);
      
      //Test Result Assert
      assertFalse(litemallLogExample1.isDistinct());
  }

  @Test(timeout = 4000)
  public void test_when_14()  throws Throwable  {
      //caseID:a919c8910d2c7bdee8a8293d7bc04668
      //CoveredLines: [38, 39, 40, 198, 199, 201]
      //Input_0_boolean: true
      //Input_1_LitemallLogExample$IExampleWhen: {}
      //Assert: assertNull(method_result.getOrderByClause());
      
      LitemallLogExample litemallLogExample0 = new LitemallLogExample();
      //mock litemallLogExample_IExampleWhen0
      LitemallLogExample.IExampleWhen litemallLogExample_IExampleWhen0 = mock(LitemallLogExample.IExampleWhen.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: when
      LitemallLogExample litemallLogExample1 = litemallLogExample0.when(true, litemallLogExample_IExampleWhen0);
      
      //Test Result Assert
      assertNull(litemallLogExample1.getOrderByClause());
  }

  @Test(timeout = 4000)
  public void test_when_15()  throws Throwable  {
      //caseID:841bf6bf322c1004454835d77a463bdb
      //CoveredLines: [38, 39, 40, 211, 212, 216]
      //Input_0_boolean: true
      //Input_1_LitemallLogExample$IExampleWhen: {}
      //Input_2_LitemallLogExample$IExampleWhen: {}
      //Assert: assertSame(method_result, litemallLogExample0);
      
      LitemallLogExample litemallLogExample0 = new LitemallLogExample();
      //mock litemallLogExample_IExampleWhen0
      LitemallLogExample.IExampleWhen litemallLogExample_IExampleWhen0 = mock(LitemallLogExample.IExampleWhen.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: when
      LitemallLogExample litemallLogExample1 = litemallLogExample0.when(true, litemallLogExample_IExampleWhen0, litemallLogExample_IExampleWhen0);
      
      //Test Result Assert
      assertSame(litemallLogExample1, litemallLogExample0);
  }

  @Test(timeout = 4000)
  public void test_when_16()  throws Throwable  {
      //caseID:c3f5bed78bbcb577cf9828404dcd4f03
      //CoveredLines: [38, 39, 40, 211, 214, 216]
      //Input_0_boolean: false
      //Input_1_LitemallLogExample$IExampleWhen: {}
      //Input_2_LitemallLogExample$IExampleWhen: {}
      //Assert: assertSame(method_result, litemallLogExample0);
      
      LitemallLogExample litemallLogExample0 = new LitemallLogExample();
      //mock litemallLogExample_IExampleWhen0
      LitemallLogExample.IExampleWhen litemallLogExample_IExampleWhen0 = mock(LitemallLogExample.IExampleWhen.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: when
      LitemallLogExample litemallLogExample1 = litemallLogExample0.when(false, litemallLogExample_IExampleWhen0, litemallLogExample_IExampleWhen0);
      
      //Test Result Assert
      assertSame(litemallLogExample1, litemallLogExample0);
  }

  @Test(timeout = 4000)
  public void test_when_17()  throws Throwable  {
      //caseID:a2a2c3c43d9cfef9c7689e5f61575053
      //CoveredLines: [38, 39, 40, 150, 151, 152, 154, 164, 165, 187, 188, 229, 230, 231, 1725, 1726, 1727, 1760, 1761, 1763]
      //Input_0_boolean: true
      //Input_1_LitemallLogExample$ICriteriaWhen: {}
      //Assert: assertSame(method_result, litemallLogExample_Criteria0);
      
      LitemallLogExample litemallLogExample0 = new LitemallLogExample();
      LitemallLogExample.Criteria litemallLogExample_Criteria0 = LitemallLogExample.newAndCreateCriteria();
      //mock litemallLogExample_ICriteriaWhen0
      LitemallLogExample.ICriteriaWhen litemallLogExample_ICriteriaWhen0 = mock(LitemallLogExample.ICriteriaWhen.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: when
      LitemallLogExample.Criteria litemallLogExample_Criteria1 = litemallLogExample_Criteria0.when(true, litemallLogExample_ICriteriaWhen0);
      
      //Test Result Assert
      assertSame(litemallLogExample_Criteria1, litemallLogExample_Criteria0);
  }

  @Test(timeout = 4000)
  public void test_when_18()  throws Throwable  {
      //caseID:baea3beca11e376ce865efa01dad8ae4
      //CoveredLines: [38, 39, 40, 150, 151, 152, 154, 164, 165, 187, 188, 229, 230, 231, 253, 256, 257, 1603, 1604, 1725, 1726, 1727, 1773, 1776, 1778, 1788, 1866, 1867, 1868, 1869, 1870, 1873, 1875, 1878, 1879]
      //Input_0_boolean: false
      //Input_1_LitemallLogExample$ICriteriaWhen: {}
      //Input_2_LitemallLogExample$ICriteriaWhen: {}
      //Assert: assertSame(litemallLogExample_Criteria0, method_result);
      
      LitemallLogExample litemallLogExample0 = new LitemallLogExample();
      LitemallLogExample.Criteria litemallLogExample_Criteria0 = LitemallLogExample.newAndCreateCriteria();
      LitemallLogExample.Criteria litemallLogExample_Criteria1 = litemallLogExample_Criteria0.andLogicalDeleted(false);
      //mock litemallLogExample_ICriteriaWhen0
      LitemallLogExample.ICriteriaWhen litemallLogExample_ICriteriaWhen0 = mock(LitemallLogExample.ICriteriaWhen.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: when
      LitemallLogExample.Criteria litemallLogExample_Criteria2 = litemallLogExample_Criteria1.when(false, litemallLogExample_ICriteriaWhen0, litemallLogExample_ICriteriaWhen0);
      
      //Test Result Assert
      assertSame(litemallLogExample_Criteria0, litemallLogExample_Criteria2);
  }
}
