/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.org.linlinjava.litemall.db.domain;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import org.junit.runner.RunWith;
import org.linlinjava.litemall.db.domain.LitemallRegion;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class LitemallRegion_SSTest extends LitemallRegion_SSTest_scaffolding {
// allCoveredLines:[6, 61, 73, 74, 85, 97, 98, 109, 121, 122, 133, 145, 146, 157, 169, 170, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 201, 202, 204, 205, 207, 208, 210, 211, 226, 227, 228, 229, 230, 231, 232, 233, 304, 314, 324, 334, 357, 367, 377, 378, 379, 381, 391, 392, 394, 405]

  @Test(timeout = 4000)
  public void test_asc_00()  throws Throwable  {
      //caseID:ae40050f572f92340e153aeafb4e6321
      //CoveredLines: [6, 367, 391, 394]
      //Assert: assertEquals("pid ASC", method_result);
      
      LitemallRegion litemallRegion0 = new LitemallRegion();
      LitemallRegion.Column litemallRegion_Column0 = LitemallRegion.Column.pid;
      
      //Call method: asc
      String string0 = litemallRegion_Column0.asc();
      
      //Test Result Assert
      assertEquals("pid ASC", string0);
  }

  @Test(timeout = 4000)
  public void test_asc_01()  throws Throwable  {
      //caseID:b6bec2539d4f16dd302421f0fa4dc61f
      //CoveredLines: [6, 367, 391, 392]
      //Assert: assertEquals("`name` ASC", method_result);
      
      LitemallRegion litemallRegion0 = new LitemallRegion();
      LitemallRegion.Column litemallRegion_Column0 = LitemallRegion.Column.name;
      
      //Call method: asc
      String string0 = litemallRegion_Column0.asc();
      
      //Test Result Assert
      assertEquals("`name` ASC", string0);
  }

  @Test(timeout = 4000)
  public void test_desc_02()  throws Throwable  {
      //caseID:a1b8a21532f311ff99b9b98e55384e69
      //CoveredLines: [6, 357, 391, 394]
      //Assert: assertEquals("pid DESC", method_result);
      
      LitemallRegion litemallRegion0 = new LitemallRegion();
      LitemallRegion.Column litemallRegion_Column0 = LitemallRegion.Column.pid;
      
      //Call method: desc
      String string0 = litemallRegion_Column0.desc();
      
      //Test Result Assert
      assertEquals("pid DESC", string0);
  }

  @Test(timeout = 4000)
  public void test_equals_03()  throws Throwable  {
      //caseID:46cedbe331102d1e8ecb5759cf15c352
      //CoveredLines: [6, 201, 202]
      //Input_0_Object: litemallRegion0
      //Assert: assertTrue(method_result);
      
      LitemallRegion litemallRegion0 = new LitemallRegion();
      
      //Call method: equals
      boolean boolean0 = litemallRegion0.equals(litemallRegion0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_equals_04()  throws Throwable  {
      //caseID:086c6769e6b61ec1d8f812e5778d4a3b
      //CoveredLines: [6, 201, 204, 205]
      //Input_0_Object: null
      //Assert: assertFalse(method_result);
      
      LitemallRegion litemallRegion0 = new LitemallRegion();
      
      //Call method: equals
      boolean boolean0 = litemallRegion0.equals(null);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_equals_05()  throws Throwable  {
      //caseID:544ae313b2e5b2f54e13fc1aa50be636
      //CoveredLines: [6, 201, 204, 207, 208]
      //Input_0_Object: (byte)1
      //Assert: assertFalse(method_result);
      
      LitemallRegion litemallRegion0 = new LitemallRegion();
      Byte byte0 = new Byte((byte)1);
      
      //Call method: equals
      boolean boolean0 = litemallRegion0.equals(byte0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_equals_06()  throws Throwable  {
      //caseID:ffddbeed881382389f8a41d227478b62
      //CoveredLines: [6, 61, 201, 204, 207, 210, 211]
      //Input_0_Object: litemallRegion0
      //Assert: assertFalse(method_result);
      
      LitemallRegion litemallRegion0 = new LitemallRegion();
      Integer integer0 = new Integer((byte)23);
      PrivateAccess.setVariable((Class<?>) LitemallRegion.class, litemallRegion0, "id", (Object) integer0);
      LitemallRegion litemallRegion1 = new LitemallRegion();
      
      //Call method: equals
      boolean boolean0 = litemallRegion1.equals(litemallRegion0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_equals_07()  throws Throwable  {
      //caseID:dacb4cb6ac81952c39a9c1aba9814d77
      //CoveredLines: [6, 61, 201, 204, 207, 210, 211]
      //Input_0_Object: litemallRegion1
      //Assert: assertFalse(method_result);
      
      LitemallRegion litemallRegion0 = new LitemallRegion();
      Integer integer0 = new Integer((byte)6);
      PrivateAccess.setVariable((Class<?>) LitemallRegion.class, litemallRegion0, "id", (Object) integer0);
      LitemallRegion litemallRegion1 = new LitemallRegion();
      
      //Call method: equals
      boolean boolean0 = litemallRegion0.equals(litemallRegion1);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_excludes_08()  throws Throwable  {
      //caseID:f9c9e5214428dabe29bd577caad152f1
      //CoveredLines: [6, 377, 378, 381]
      //Input_0_LitemallRegion$Column[]: litemallRegion_ColumnArray0
      //Assert: assertEquals(5, method_result.length);
      
      LitemallRegion litemallRegion0 = new LitemallRegion();
      LitemallRegion.Column[] litemallRegion_ColumnArray0 = new LitemallRegion.Column[0];
      
      //Call method: excludes
      LitemallRegion.Column[] litemallRegion_ColumnArray1 = LitemallRegion.Column.excludes(litemallRegion_ColumnArray0);
      
      //Test Result Assert
      assertEquals(5, litemallRegion_ColumnArray1.length);
  }

  @Test(timeout = 4000)
  public void test_excludes_09()  throws Throwable  {
      //caseID:94ca0de219ea6dfceed119f13341dc2b
      //CoveredLines: [6, 377, 378, 381]
      //Input_0_LitemallRegion$Column[]: null
      //Assert: assertEquals(5, method_result.length);
      
      LitemallRegion litemallRegion0 = new LitemallRegion();
      
      //Call method: excludes
      LitemallRegion.Column[] litemallRegion_ColumnArray0 = LitemallRegion.Column.excludes((LitemallRegion.Column[]) null);
      
      //Test Result Assert
      assertEquals(5, litemallRegion_ColumnArray0.length);
  }

  @Test(timeout = 4000)
  public void test_excludes_10()  throws Throwable  {
      //caseID:9814172577d13ff3318ff82dce2dcf9d
      //CoveredLines: [6, 377, 378, 379, 381]
      //Input_0_LitemallRegion$Column[]: litemallRegion_ColumnArray0
      //Assert: assertNotSame(litemallRegion_ColumnArray0, method_result);
      
      LitemallRegion litemallRegion0 = new LitemallRegion();
      LitemallRegion.Column[] litemallRegion_ColumnArray0 = new LitemallRegion.Column[9];
      
      //Call method: excludes
      LitemallRegion.Column[] litemallRegion_ColumnArray1 = LitemallRegion.Column.excludes(litemallRegion_ColumnArray0);
      
      //Test Result Assert
      assertNotSame(litemallRegion_ColumnArray0, litemallRegion_ColumnArray1);
  }

  @Test(timeout = 4000)
  public void test_getAliasedEscapedColumnName_11()  throws Throwable  {
      //caseID:af003b44ae152473b76b0b256be1240c
      //CoveredLines: [6, 391, 392, 405]
      //Assert: assertEquals("`type`", method_result);
      
      LitemallRegion litemallRegion0 = new LitemallRegion();
      LitemallRegion.Column litemallRegion_Column0 = LitemallRegion.Column.type;
      
      //Call method: getAliasedEscapedColumnName
      String string0 = litemallRegion_Column0.getAliasedEscapedColumnName();
      
      //Test Result Assert
      assertEquals("`type`", string0);
  }

  @Test(timeout = 4000)
  public void test_getJavaProperty_12()  throws Throwable  {
      //caseID:70d8abed7432caee0c31ce417fbfaecb
      //CoveredLines: [6, 324]
      //Assert: assertEquals("pid", method_result);
      
      LitemallRegion litemallRegion0 = new LitemallRegion();
      LitemallRegion.Column litemallRegion_Column0 = LitemallRegion.Column.pid;
      
      //Call method: getJavaProperty
      String string0 = litemallRegion_Column0.getJavaProperty();
      
      //Test Result Assert
      assertEquals("pid", string0);
  }

  @Test(timeout = 4000)
  public void test_getJdbcType_13()  throws Throwable  {
      //caseID:9052177b0e21fcb3a796dd237da17563
      //CoveredLines: [6, 334]
      //Assert: assertEquals("INTEGER", method_result);
      
      LitemallRegion litemallRegion0 = new LitemallRegion();
      LitemallRegion.Column litemallRegion_Column0 = LitemallRegion.Column.id;
      
      //Call method: getJdbcType
      String string0 = litemallRegion_Column0.getJdbcType();
      
      //Test Result Assert
      assertEquals("INTEGER", string0);
  }

  @Test(timeout = 4000)
  public void test_getValue_14()  throws Throwable  {
      //caseID:95133c7d1c7554a1a98f8a01c1a9784c
      //CoveredLines: [6, 314]
      //Assert: assertEquals("pid", method_result);
      
      LitemallRegion litemallRegion0 = new LitemallRegion();
      LitemallRegion.Column litemallRegion_Column0 = LitemallRegion.Column.pid;
      
      //Call method: getValue
      String string0 = litemallRegion_Column0.getValue();
      
      //Test Result Assert
      assertEquals("pid", string0);
  }

  @Test(timeout = 4000)
  public void test_setCode_15()  throws Throwable  {
      //caseID:a964b2f1cadd7dd48e8f843242f925f2
      //CoveredLines: [6, 169, 170]
      //Input_0_Integer: (byte) (-14)
      
      LitemallRegion litemallRegion0 = new LitemallRegion();
      Integer integer0 = new Integer((byte) (-14));
      
      //Call method: setCode
      litemallRegion0.setCode(integer0);
      
      //Test Result Assert
      assertNull(litemallRegion0.getType());
  }

  @Test(timeout = 4000)
  public void test_setId_16()  throws Throwable  {
      //caseID:d2856bb2996f1ee1562f4ad274b919a0
      //CoveredLines: [6, 73, 74]
      //Input_0_Integer: (byte)59
      
      LitemallRegion litemallRegion0 = new LitemallRegion();
      Integer integer0 = new Integer((byte)59);
      
      //Call method: setId
      litemallRegion0.setId(integer0);
      
      //Test Result Assert
      assertNull(litemallRegion0.getPid());
  }

  @Test(timeout = 4000)
  public void test_setName_17()  throws Throwable  {
      //caseID:b23a75df76eba68ea6340798528c3410
      //CoveredLines: [6, 121, 122]
      //Input_0_String: "[ +gs2X !w-"
      
      LitemallRegion litemallRegion0 = new LitemallRegion();
      
      //Call method: setName
      litemallRegion0.setName("[ +gs2X !w-");
      
      //Test Result Assert
      assertNull(litemallRegion0.getType());
  }

  @Test(timeout = 4000)
  public void test_setPid_18()  throws Throwable  {
      //caseID:b8d6dd2a6df80f0c309ede557ef9c334
      //CoveredLines: [6, 97, 98]
      //Input_0_Integer: (byte)59
      
      LitemallRegion litemallRegion0 = new LitemallRegion();
      Integer integer0 = new Integer((byte)59);
      
      //Call method: setPid
      litemallRegion0.setPid(integer0);
      
      //Test Result Assert
      assertNull(litemallRegion0.getCode());
  }

  @Test(timeout = 4000)
  public void test_setType_19()  throws Throwable  {
      //caseID:b9c50257433d4398abfb65ff21264ea6
      //CoveredLines: [6, 145, 146]
      //Input_0_Byte: (byte)12
      
      LitemallRegion litemallRegion0 = new LitemallRegion();
      Byte byte0 = new Byte((byte)12);
      
      //Call method: setType
      litemallRegion0.setType(byte0);
      
      //Test Result Assert
      assertNull(litemallRegion0.getPid());
  }

  @Test(timeout = 4000)
  public void test_toString_20()  throws Throwable  {
      //caseID:e0dfa9fc0575c54aa5721ebcc6c89b3a
      //CoveredLines: [6, 61, 85, 109, 133, 157, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 226, 227, 228, 229, 230, 231, 232, 233]
      //Assert: assertEquals("LitemallRegion [Hash = 28629151, id=null, pid=null, name=null, type=null, code=null]", method_result);
      
      LitemallRegion litemallRegion0 = new LitemallRegion();
      
      //Call method: toString
      String string0 = litemallRegion0.toString();
      
      //Test Result Assert
      assertEquals("LitemallRegion [Hash = 28629151, id=null, pid=null, name=null, type=null, code=null]", string0);
  }

  @Test(timeout = 4000)
  public void test_value_21()  throws Throwable  {
      //caseID:82bbe5c79089b654c1b56e34c1098907
      //CoveredLines: [6, 304]
      //Assert: assertEquals("code", method_result);
      
      LitemallRegion litemallRegion0 = new LitemallRegion();
      LitemallRegion.Column litemallRegion_Column0 = LitemallRegion.Column.code;
      
      //Call method: value
      String string0 = litemallRegion_Column0.value();
      
      //Test Result Assert
      assertEquals("code", string0);
  }
}
