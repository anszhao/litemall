/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.org.linlinjava.litemall.db.domain;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import org.junit.runner.RunWith;
import org.linlinjava.litemall.db.domain.LitemallOrder;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.mock.java.time.MockLocalDateTime;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class LitemallOrder_SSTest extends LitemallOrder_SSTest_scaffolding {
// allCoveredLines:[8, 313, 325, 326, 337, 349, 350, 361, 373, 374, 385, 409, 421, 422, 433, 445, 446, 457, 469, 470, 481, 493, 494, 505, 517, 518, 529, 541, 542, 553, 565, 566, 577, 589, 590, 601, 613, 614, 625, 637, 638, 649, 661, 662, 673, 685, 686, 697, 709, 710, 721, 733, 734, 745, 757, 758, 769, 781, 782, 793, 805, 806, 817, 829, 830, 841, 853, 854, 865, 877, 878, 889, 901, 902, 913, 925, 926, 937, 949, 950, 961, 973, 974, 985, 997, 998, 1009, 1021, 1022, 1031, 1032, 1043, 1055, 1056, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1115, 1116, 1118, 1121, 1122, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1246, 1256, 1364, 1374, 1384, 1394, 1417, 1427, 1437, 1438, 1439, 1441, 1451, 1454, 1465]

  @Test(timeout = 4000)
  public void test_andLogicalDeleted_00()  throws Throwable  {
      //caseID:36e47d1fa5f4b5415d86b63fbd39d08f
      //CoveredLines: [8, 1009, 1031, 1032, 1055, 1056, 1256]
      //Input_0_boolean: false
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      litemallOrder0.getUpdateTime();
      
      //Call method: andLogicalDeleted
      litemallOrder0.andLogicalDeleted(false);
      
      //Test Result Assert
      assertNull(litemallOrder0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_andLogicalDeleted_01()  throws Throwable  {
      //caseID:7d1049815b066161c9a773778922fb19
      //CoveredLines: [8, 889, 913, 1031, 1032, 1055, 1056, 1256]
      //Input_0_boolean: true
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      litemallOrder0.getRefundTime();
      litemallOrder0.getConfirmTime();
      
      //Call method: andLogicalDeleted
      litemallOrder0.andLogicalDeleted(true);
      
      //Test Result Assert
      assertNull(litemallOrder0.getAftersaleStatus());
  }

  @Test(timeout = 4000)
  public void test_asc_02()  throws Throwable  {
      //caseID:17bcd0747efc9d1cf3db78cb1bd127c8
      //CoveredLines: [8, 889, 961, 1427, 1451, 1454]
      //Assert: assertEquals("refund_amount ASC", method_result);
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      litemallOrder0.getRefundTime();
      litemallOrder0.getEndTime();
      LitemallOrder.Column litemallOrder_Column0 = LitemallOrder.Column.refundAmount;
      
      //Call method: asc
      String string0 = litemallOrder_Column0.asc();
      
      //Test Result Assert
      assertEquals("refund_amount ASC", string0);
  }

  @Test(timeout = 4000)
  public void test_desc_03()  throws Throwable  {
      //caseID:a0d9360dc19687e198c82b08d4b0dda7
      //CoveredLines: [8, 889, 1417, 1451, 1454]
      //Assert: assertEquals("refund_amount DESC", method_result);
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      litemallOrder0.getRefundTime();
      LitemallOrder.Column litemallOrder_Column0 = LitemallOrder.Column.refundAmount;
      
      //Call method: desc
      String string0 = litemallOrder_Column0.desc();
      
      //Test Result Assert
      assertEquals("refund_amount DESC", string0);
  }

  @Test(timeout = 4000)
  public void test_equals_04()  throws Throwable  {
      //caseID:3ffd986842fd2ddc2237c887ae2f4e0a
      //CoveredLines: [8, 1115, 1116]
      //Input_0_Object: litemallOrder0
      //Assert: assertTrue(method_result);
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      
      //Call method: equals
      boolean boolean0 = litemallOrder0.equals(litemallOrder0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_equals_05()  throws Throwable  {
      //caseID:89def63a770409a9bcee2f9f0906ff92
      //CoveredLines: [8, 721, 1115, 1118, 1121, 1122]
      //Input_0_Object: "F!&BzJ"
      //Assert: assertFalse(method_result);
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      litemallOrder0.getPayTime();
      
      //Call method: equals
      boolean boolean0 = litemallOrder0.equals("F!&BzJ");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_excludes_06()  throws Throwable  {
      //caseID:f039c8e7dfc17bc16cc637ab53ce1c15
      //CoveredLines: [8, 961, 1437, 1438, 1441]
      //Input_0_LitemallOrder$Column[]: null
      //Assert: assertEquals(31, method_result.length);
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      litemallOrder0.getEndTime();
      
      //Call method: excludes
      LitemallOrder.Column[] litemallOrder_ColumnArray0 = LitemallOrder.Column.excludes((LitemallOrder.Column[]) null);
      
      //Test Result Assert
      assertEquals(31, litemallOrder_ColumnArray0.length);
  }

  @Test(timeout = 4000)
  public void test_excludes_07()  throws Throwable  {
      //caseID:934a7807f611ccb6fb06f4ef972ed127
      //CoveredLines: [8, 961, 1437, 1438, 1439, 1441]
      //Input_0_LitemallOrder$Column[]: litemallOrder_ColumnArray0
      //Assert: assertNotSame(litemallOrder_ColumnArray0, method_result);
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      litemallOrder0.getEndTime();
      LitemallOrder.Column[] litemallOrder_ColumnArray0 = new LitemallOrder.Column[1];
      
      //Call method: excludes
      LitemallOrder.Column[] litemallOrder_ColumnArray1 = LitemallOrder.Column.excludes(litemallOrder_ColumnArray0);
      
      //Test Result Assert
      assertNotSame(litemallOrder_ColumnArray0, litemallOrder_ColumnArray1);
  }

  @Test(timeout = 4000)
  public void test_getAliasedEscapedColumnName_08()  throws Throwable  {
      //caseID:fe328ebbfe2b7d7822c8445b5f2d9cc3
      //CoveredLines: [8, 1451, 1454, 1465]
      //Assert: assertEquals("ship_sn", method_result);
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      LitemallOrder.Column litemallOrder_Column0 = LitemallOrder.Column.shipSn;
      
      //Call method: getAliasedEscapedColumnName
      String string0 = litemallOrder_Column0.getAliasedEscapedColumnName();
      
      //Test Result Assert
      assertEquals("ship_sn", string0);
  }

  @Test(timeout = 4000)
  public void test_getJavaProperty_09()  throws Throwable  {
      //caseID:896d5cdcdc20f1cbdea762189c34d66f
      //CoveredLines: [8, 1384]
      //Assert: assertEquals("confirmTime", method_result);
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      LitemallOrder.Column litemallOrder_Column0 = LitemallOrder.Column.confirmTime;
      
      //Call method: getJavaProperty
      String string0 = litemallOrder_Column0.getJavaProperty();
      
      //Test Result Assert
      assertEquals("confirmTime", string0);
  }

  @Test(timeout = 4000)
  public void test_getJdbcType_10()  throws Throwable  {
      //caseID:8aadefc68b4673b174c5aae64e12484f
      //CoveredLines: [8, 889, 1394]
      //Assert: assertEquals("VARCHAR", method_result);
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      litemallOrder0.getRefundTime();
      LitemallOrder.Column litemallOrder_Column0 = LitemallOrder.Column.shipChannel;
      
      //Call method: getJdbcType
      String string0 = litemallOrder_Column0.getJdbcType();
      
      //Test Result Assert
      assertEquals("VARCHAR", string0);
  }

  @Test(timeout = 4000)
  public void test_getValue_11()  throws Throwable  {
      //caseID:91b38bbe3203f6fca1212d241bba63fc
      //CoveredLines: [8, 961, 1374]
      //Assert: assertEquals("goods_price", method_result);
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      litemallOrder0.getEndTime();
      LitemallOrder.Column litemallOrder_Column0 = LitemallOrder.Column.goodsPrice;
      
      //Call method: getValue
      String string0 = litemallOrder_Column0.getValue();
      
      //Test Result Assert
      assertEquals("goods_price", string0);
  }

  @Test(timeout = 4000)
  public void test_getValue_12()  throws Throwable  {
      //caseID:cb7fd28317d04c4bcaa29c2d8ca93539
      //CoveredLines: [8, 793, 1246]
      //Assert: assertFalse(method_result);
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      litemallOrder0.getShipTime();
      LitemallOrder.Deleted litemallOrder_Deleted0 = LitemallOrder.Deleted.IS_DELETED;
      
      //Call method: getValue
      Boolean boolean0 = litemallOrder_Deleted0.getValue();
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_hashCode_13()  throws Throwable  {
      //caseID:a7b627194a76d18e93b6ae58c5c39b54
      //CoveredLines: [8, 313, 337, 361, 385, 409, 433, 457, 481, 505, 529, 553, 577, 601, 625, 649, 673, 697, 721, 745, 769, 793, 817, 841, 865, 889, 913, 937, 961, 985, 1009, 1043, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199]
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      
      //Call method: hashCode
      litemallOrder0.hashCode();
  }

  @Test(timeout = 4000)
  public void test_hashCode_14()  throws Throwable  {
      //caseID:eb512052405b5bed26c02d8e72861412
      //CoveredLines: [8, 313, 337, 361, 385, 409, 433, 457, 481, 505, 529, 553, 577, 601, 625, 649, 673, 697, 721, 745, 769, 793, 817, 841, 865, 889, 913, 937, 961, 985, 1009, 1043, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199]
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      litemallOrder0.getRefundTime();
      
      //Call method: hashCode
      litemallOrder0.hashCode();
  }

  @Test(timeout = 4000)
  public void test_setActualPrice_15()  throws Throwable  {
      //caseID:d6799b6893f9e4206339c1458f254fc9
      //CoveredLines: [8, 685, 686, 985]
      //Input_0_BigDecimal: 0
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      BigDecimal bigDecimal0 = new BigDecimal(0);
      litemallOrder0.getAddTime();
      
      //Call method: setActualPrice
      litemallOrder0.setActualPrice(bigDecimal0);
      
      //Test Result Assert
      assertNull(litemallOrder0.getRefundType());
  }

  @Test(timeout = 4000)
  public void test_setAddTime_16()  throws Throwable  {
      //caseID:ad4f102a20a19a51c3c9a8454a9bd254
      //CoveredLines: [8, 997, 998]
      //Input_0_LocalDateTime: localDateTime0
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      
      //Call method: setAddTime
      litemallOrder0.setAddTime(localDateTime0);
      
      //Test Result Assert
      assertNull(litemallOrder0.getOrderStatus());
  }

  @Test(timeout = 4000)
  public void test_setAddress_17()  throws Throwable  {
      //caseID:f85c8ce8da3144d89634fdff47f3f731
      //CoveredLines: [8, 493, 494, 961]
      //Input_0_String: "EEE MMM dd HH:mm:ss yyyy"
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      litemallOrder0.getEndTime();
      
      //Call method: setAddress
      litemallOrder0.setAddress("EEE MMM dd HH:mm:ss yyyy");
      
      //Test Result Assert
      assertNull(litemallOrder0.getRefundType());
  }

  @Test(timeout = 4000)
  public void test_setAftersaleStatus_18()  throws Throwable  {
      //caseID:cf260512f9cd0ee8f16da4671b37b9ba
      //CoveredLines: [8, 421, 422]
      //Input_0_Short: (short)0
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      Short short0 = new Short((short)0);
      
      //Call method: setAftersaleStatus
      litemallOrder0.setAftersaleStatus(short0);
      
      //Test Result Assert
      assertNull(litemallOrder0.getId());
  }

  @Test(timeout = 4000)
  public void test_setComments_19()  throws Throwable  {
      //caseID:4d7e6747e840425f48072b4eea0fb320
      //CoveredLines: [8, 949, 950]
      //Input_0_Short: (short)559
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      Short short0 = new Short((short)559);
      
      //Call method: setComments
      litemallOrder0.setComments(short0);
      
      //Test Result Assert
      assertNull(litemallOrder0.getAftersaleStatus());
  }

  @Test(timeout = 4000)
  public void test_setConfirmTime_20()  throws Throwable  {
      //caseID:f9d8dbc8d73a481f491ed0da81caa200
      //CoveredLines: [8, 793, 913, 925, 926]
      //Input_0_LocalDateTime: null
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      litemallOrder0.getShipTime();
      litemallOrder0.getConfirmTime();
      
      //Call method: setConfirmTime
      litemallOrder0.setConfirmTime((LocalDateTime) null);
      
      //Test Result Assert
      assertNull(litemallOrder0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_setConsignee_21()  throws Throwable  {
      //caseID:c1af4a2124f2b5e459abd52f7b098e0d
      //CoveredLines: [8, 445, 446, 913]
      //Input_0_String: "org.springframework.http.server.reactive.ContextPathCompositeHandler"
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      litemallOrder0.getConfirmTime();
      
      //Call method: setConsignee
      litemallOrder0.setConsignee("org.springframework.http.server.reactive.ContextPathCompositeHandler");
      
      //Test Result Assert
      assertNull(litemallOrder0.getComments());
  }

  @Test(timeout = 4000)
  public void test_setCouponPrice_22()  throws Throwable  {
      //caseID:11eb177f0cc42aa25a25089c102e28f2
      //CoveredLines: [8, 589, 590]
      //Input_0_BigDecimal: BigDecimal.ONE
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      
      //Call method: setCouponPrice
      litemallOrder0.setCouponPrice(bigDecimal0);
      
      //Test Result Assert
      assertNull(litemallOrder0.getPayId());
  }

  @Test(timeout = 4000)
  public void test_setEndTime_23()  throws Throwable  {
      //caseID:fa10309a82e78a477159864da1f45de5
      //CoveredLines: [8, 721, 973, 974]
      //Input_0_LocalDateTime: null
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      litemallOrder0.getPayTime();
      
      //Call method: setEndTime
      litemallOrder0.setEndTime((LocalDateTime) null);
      
      //Test Result Assert
      assertNull(litemallOrder0.getUserId());
  }

  @Test(timeout = 4000)
  public void test_setFreightPrice_24()  throws Throwable  {
      //caseID:fc21a4949e38c263fd2c233b44869989
      //CoveredLines: [8, 565, 566]
      //Input_0_BigDecimal: BigDecimal.TEN
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      
      //Call method: setFreightPrice
      litemallOrder0.setFreightPrice(bigDecimal0);
      
      //Test Result Assert
      assertNull(litemallOrder0.getId());
  }

  @Test(timeout = 4000)
  public void test_setGoodsPrice_25()  throws Throwable  {
      //caseID:6b3b259f1fcd5f6f952cbe8fe4845442
      //CoveredLines: [8, 541, 542, 793]
      //Input_0_BigDecimal: (int) (short) (-1921)
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      BigDecimal bigDecimal0 = new BigDecimal((int) (short) (-1921));
      litemallOrder0.getShipTime();
      
      //Call method: setGoodsPrice
      litemallOrder0.setGoodsPrice(bigDecimal0);
      
      //Test Result Assert
      assertNull(litemallOrder0.getOrderStatus());
  }

  @Test(timeout = 4000)
  public void test_setGrouponPrice_26()  throws Throwable  {
      //caseID:33c0b2aee989e66bd04538cd862e19e4
      //CoveredLines: [8, 637, 638, 793]
      //Input_0_BigDecimal: BigDecimal.TEN
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      litemallOrder0.getShipTime();
      
      //Call method: setGrouponPrice
      litemallOrder0.setGrouponPrice(bigDecimal0);
      
      //Test Result Assert
      assertNull(litemallOrder0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_setId_27()  throws Throwable  {
      //caseID:a68bda23cecfd6deeabe24c65b847107
      //CoveredLines: [8, 325, 326, 793]
      //Input_0_Integer: 5435
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      Integer integer0 = new Integer(5435);
      litemallOrder0.getShipTime();
      
      //Call method: setId
      litemallOrder0.setId(integer0);
      
      //Test Result Assert
      assertNull(litemallOrder0.getOrderStatus());
  }

  @Test(timeout = 4000)
  public void test_setIntegralPrice_28()  throws Throwable  {
      //caseID:efc3c61fea116c3453ec316336b08c5e
      //CoveredLines: [8, 613, 614]
      //Input_0_BigDecimal: BigDecimal.ZERO
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      
      //Call method: setIntegralPrice
      litemallOrder0.setIntegralPrice(bigDecimal0);
      
      //Test Result Assert
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test_setMessage_29()  throws Throwable  {
      //caseID:4a8eff25423a12d32859b6b11fee3aec
      //CoveredLines: [8, 517, 518, 961]
      //Input_0_String: "1"
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      litemallOrder0.getEndTime();
      
      //Call method: setMessage
      litemallOrder0.setMessage("1");
      
      //Test Result Assert
      assertNull(litemallOrder0.getDeleted());
  }

  @Test(timeout = 4000)
  public void test_setMobile_30()  throws Throwable  {
      //caseID:82d6da5d9a0b4424c87fc078e45fa524
      //CoveredLines: [8, 469, 470, 889]
      //Input_0_String: "22"
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      litemallOrder0.getRefundTime();
      
      //Call method: setMobile
      litemallOrder0.setMobile("22");
      
      //Test Result Assert
      assertNull(litemallOrder0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_setOrderPrice_31()  throws Throwable  {
      //caseID:1523ed05c2cf9b52b8172b033457d803
      //CoveredLines: [8, 661, 662, 1009]
      //Input_0_BigDecimal: BigDecimal.TEN
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      litemallOrder0.getUpdateTime();
      
      //Call method: setOrderPrice
      litemallOrder0.setOrderPrice(bigDecimal0);
      
      //Test Result Assert
      assertNull(litemallOrder0.getId());
  }

  @Test(timeout = 4000)
  public void test_setOrderSn_32()  throws Throwable  {
      //caseID:b1f299251a0ffee42d1262b79b29dc9a
      //CoveredLines: [8, 373, 374, 985]
      //Input_0_String: "Pragma"
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      litemallOrder0.getAddTime();
      
      //Call method: setOrderSn
      litemallOrder0.setOrderSn("Pragma");
      
      //Test Result Assert
      assertNull(litemallOrder0.getId());
  }

  @Test(timeout = 4000)
  public void test_setPayId_33()  throws Throwable  {
      //caseID:12c28da1a97ce600cd1a52c256823da4
      //CoveredLines: [8, 709, 710, 985]
      //Input_0_String: "order_sn"
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      litemallOrder0.getAddTime();
      
      //Call method: setPayId
      litemallOrder0.setPayId("order_sn");
      
      //Test Result Assert
      assertNull(litemallOrder0.getOrderStatus());
  }

  @Test(timeout = 4000)
  public void test_setPayTime_34()  throws Throwable  {
      //caseID:f9b86e264a65761d24e8f868bf199e7a
      //CoveredLines: [8, 733, 734, 913]
      //Input_0_LocalDateTime: null
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      litemallOrder0.getConfirmTime();
      
      //Call method: setPayTime
      litemallOrder0.setPayTime((LocalDateTime) null);
      
      //Test Result Assert
      assertNull(litemallOrder0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_setRefundAmount_35()  throws Throwable  {
      //caseID:368ef76060dffb5b614cdca0bea0ed11
      //CoveredLines: [8, 793, 829, 830, 913]
      //Input_0_BigDecimal: BigDecimal.TEN
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      litemallOrder0.getConfirmTime();
      litemallOrder0.getShipTime();
      
      //Call method: setRefundAmount
      litemallOrder0.setRefundAmount(bigDecimal0);
      
      //Test Result Assert
      assertNull(litemallOrder0.getPayId());
  }

  @Test(timeout = 4000)
  public void test_setRefundContent_36()  throws Throwable  {
      //caseID:de608a581473de8ee3e22abeaed45009
      //CoveredLines: [8, 877, 878, 913]
      //Input_0_String: "SMALLINT"
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      litemallOrder0.getConfirmTime();
      
      //Call method: setRefundContent
      litemallOrder0.setRefundContent("SMALLINT");
      
      //Test Result Assert
      assertNull(litemallOrder0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_setRefundTime_37()  throws Throwable  {
      //caseID:99c87dfa2b585af0aa94e2e47c392ae0
      //CoveredLines: [8, 901, 902]
      //Input_0_LocalDateTime: localDateTime0
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      
      //Call method: setRefundTime
      litemallOrder0.setRefundTime(localDateTime0);
      
      //Test Result Assert
      assertNull(litemallOrder0.getUserId());
  }

  @Test(timeout = 4000)
  public void test_setRefundType_38()  throws Throwable  {
      //caseID:b3f38793b2f1a5d3e9cb48fd2e14cf0a
      //CoveredLines: [8, 853, 854, 889]
      //Input_0_String: "refund_type"
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      litemallOrder0.getRefundTime();
      
      //Call method: setRefundType
      litemallOrder0.setRefundType("refund_type");
      
      //Test Result Assert
      assertNull(litemallOrder0.getId());
  }

  @Test(timeout = 4000)
  public void test_setShipChannel_39()  throws Throwable  {
      //caseID:c2ae373f02cef35850d1217767b4eece
      //CoveredLines: [8, 781, 782, 889]
      //Input_0_String: "A,QL$8 3mS0p"
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      litemallOrder0.getRefundTime();
      
      //Call method: setShipChannel
      litemallOrder0.setShipChannel("A,QL$8 3mS0p");
      
      //Test Result Assert
      assertNull(litemallOrder0.getOrderStatus());
  }

  @Test(timeout = 4000)
  public void test_setShipSn_40()  throws Throwable  {
      //caseID:7128fbdfd1b492fdc7aca0e6baf4bf21
      //CoveredLines: [8, 757, 758, 793, 1009]
      //Input_0_String: "order_status"
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      litemallOrder0.getUpdateTime();
      litemallOrder0.getShipTime();
      
      //Call method: setShipSn
      litemallOrder0.setShipSn("order_status");
      
      //Test Result Assert
      assertNull(litemallOrder0.getMessage());
  }

  @Test(timeout = 4000)
  public void test_setShipTime_41()  throws Throwable  {
      //caseID:902cd970f29f04536e9a286b66859c8b
      //CoveredLines: [8, 805, 806, 1009]
      //Input_0_LocalDateTime: null
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      litemallOrder0.getUpdateTime();
      
      //Call method: setShipTime
      litemallOrder0.setShipTime((LocalDateTime) null);
      
      //Test Result Assert
      assertNull(litemallOrder0.getDeleted());
  }

  @Test(timeout = 4000)
  public void test_setUpdateTime_42()  throws Throwable  {
      //caseID:052208f81d09a0e54d3d073a7a09bd55
      //CoveredLines: [8, 913, 1021, 1022]
      //Input_0_LocalDateTime: null
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      litemallOrder0.getConfirmTime();
      
      //Call method: setUpdateTime
      litemallOrder0.setUpdateTime((LocalDateTime) null);
      
      //Test Result Assert
      assertNull(litemallOrder0.getOrderStatus());
  }

  @Test(timeout = 4000)
  public void test_setUserId_43()  throws Throwable  {
      //caseID:d50d0ba685e3d09a97e9887c0fa6863c
      //CoveredLines: [8, 349, 350, 721]
      //Input_0_Integer: 0
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      Integer integer0 = new Integer(0);
      litemallOrder0.getPayTime();
      
      //Call method: setUserId
      litemallOrder0.setUserId(integer0);
      
      //Test Result Assert
      assertNull(litemallOrder0.getPayId());
  }

  @Test(timeout = 4000)
  public void test_toString_44()  throws Throwable  {
      //caseID:1b04f559719321161d1786f605048c73
      //CoveredLines: [8, 313, 337, 361, 385, 409, 433, 457, 481, 505, 529, 553, 577, 601, 625, 649, 673, 697, 721, 745, 769, 793, 817, 841, 865, 889, 913, 937, 961, 985, 1009, 1043, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199]
      //Assert: assertEquals("LitemallOrder [Hash = -2010103841, IS_DELETED=false, NOT_DELETED=false, id=null, userId=null, orderSn=null, orderStatus=null, aftersaleStatus=null, consignee=null, mobile=null, address=null, message=null, goodsPrice=null, freightPrice=null, couponPrice=null, integralPrice=null, grouponPrice=null, orderPrice=null, actualPrice=null, payId=null, payTime=null, shipSn=null, shipChannel=null, shipTime=null, refundAmount=null, refundType=null, refundContent=null, refundTime=null, confirmTime=null, comments=null, endTime=null, addTime=null, updateTime=null, deleted=null]", method_result);
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      litemallOrder0.getEndTime();
      
      //Call method: toString
      String string0 = litemallOrder0.toString();
      
      //Test Result Assert
      assertEquals("LitemallOrder [Hash = -2010103841, IS_DELETED=false, NOT_DELETED=false, id=null, userId=null, orderSn=null, orderStatus=null, aftersaleStatus=null, consignee=null, mobile=null, address=null, message=null, goodsPrice=null, freightPrice=null, couponPrice=null, integralPrice=null, grouponPrice=null, orderPrice=null, actualPrice=null, payId=null, payTime=null, shipSn=null, shipChannel=null, shipTime=null, refundAmount=null, refundType=null, refundContent=null, refundTime=null, confirmTime=null, comments=null, endTime=null, addTime=null, updateTime=null, deleted=null]", string0);
  }

  @Test(timeout = 4000)
  public void test_value_45()  throws Throwable  {
      //caseID:b8396db358050b9587615505400d3493
      //CoveredLines: [8, 913, 1364]
      //Assert: assertEquals("mobile", method_result);
      
      LitemallOrder litemallOrder0 = new LitemallOrder();
      litemallOrder0.getConfirmTime();
      LitemallOrder.Column litemallOrder_Column0 = LitemallOrder.Column.mobile;
      
      //Call method: value
      String string0 = litemallOrder_Column0.value();
      
      //Test Result Assert
      assertEquals("mobile", string0);
  }
}
